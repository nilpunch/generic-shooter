//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game/Scripts/Core/MetaCharacters/Player/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SM.FPS
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""cc85eb96-ad8a-460e-b0a3-a1d25bbf3f6f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f0da09c7-a423-4899-9d3d-f892de5f18ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""aa036295-3983-4bac-b62f-331124067ae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""6e9bd0ba-6515-4692-b151-93acdc50e0bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""6c9333dd-e893-4bea-a6f3-1a6fcd4aa751"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b072832-e2bc-4200-a420-1b52a0ef13ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c46056e2-ed23-4071-80c5-b343b21ced63"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""23a2edb1-bd2c-416d-8bfc-6b10af5f6a60"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae75ebc1-634b-427e-bfaa-6c198695dcd4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ef8b2e3f-476e-4a11-ad55-cd2b559a968d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4891199-3ca3-462b-9c63-a64bcc26e7ef"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapons"",
            ""id"": ""38b3aa85-8f84-45f2-8a4e-38e0fd9fe2c4"",
            ""actions"": [
                {
                    ""name"": ""MainFire"",
                    ""type"": ""Button"",
                    ""id"": ""6869cdae-b255-4581-98d6-153b76d3e201"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AlterFire"",
                    ""type"": ""Button"",
                    ""id"": ""766dd6f2-d370-47cf-80a0-53c3c1a14e38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowAwayWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""a80c03fe-c145-4d00-8c27-a6dc8b6d43a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollInventory"",
                    ""type"": ""Value"",
                    ""id"": ""fbb4f3dd-55b4-4104-9ee9-34dfe036f298"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""3f36f530-27b6-44aa-859c-738524dd647e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ba839ce-bd77-4f9d-8c4a-90556ae5093b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MainFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79a8743c-7c5f-485d-b46d-78ba2998fb06"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""AlterFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""756c4c71-29e4-4bf7-b46d-dbc54950d4b7"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""ThrowAwayWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd59241c-ab09-4889-bfa1-1a8f94f72766"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""ScrollInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9efb229-3626-4d0d-8207-61f1412f170b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Move = m_Character.FindAction("Move", throwIfNotFound: true);
            m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
            m_Character_Aim = m_Character.FindAction("Aim", throwIfNotFound: true);
            // Weapons
            m_Weapons = asset.FindActionMap("Weapons", throwIfNotFound: true);
            m_Weapons_MainFire = m_Weapons.FindAction("MainFire", throwIfNotFound: true);
            m_Weapons_AlterFire = m_Weapons.FindAction("AlterFire", throwIfNotFound: true);
            m_Weapons_ThrowAwayWeapon = m_Weapons.FindAction("ThrowAwayWeapon", throwIfNotFound: true);
            m_Weapons_ScrollInventory = m_Weapons.FindAction("ScrollInventory", throwIfNotFound: true);
            m_Weapons_Reload = m_Weapons.FindAction("Reload", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private ICharacterActions m_CharacterActionsCallbackInterface;
        private readonly InputAction m_Character_Move;
        private readonly InputAction m_Character_Jump;
        private readonly InputAction m_Character_Aim;
        public struct CharacterActions
        {
            private @PlayerInput m_Wrapper;
            public CharacterActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Character_Move;
            public InputAction @Jump => m_Wrapper.m_Character_Jump;
            public InputAction @Aim => m_Wrapper.m_Character_Aim;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                    @Aim.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                }
                m_Wrapper.m_CharacterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                }
            }
        }
        public CharacterActions @Character => new CharacterActions(this);

        // Weapons
        private readonly InputActionMap m_Weapons;
        private IWeaponsActions m_WeaponsActionsCallbackInterface;
        private readonly InputAction m_Weapons_MainFire;
        private readonly InputAction m_Weapons_AlterFire;
        private readonly InputAction m_Weapons_ThrowAwayWeapon;
        private readonly InputAction m_Weapons_ScrollInventory;
        private readonly InputAction m_Weapons_Reload;
        public struct WeaponsActions
        {
            private @PlayerInput m_Wrapper;
            public WeaponsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MainFire => m_Wrapper.m_Weapons_MainFire;
            public InputAction @AlterFire => m_Wrapper.m_Weapons_AlterFire;
            public InputAction @ThrowAwayWeapon => m_Wrapper.m_Weapons_ThrowAwayWeapon;
            public InputAction @ScrollInventory => m_Wrapper.m_Weapons_ScrollInventory;
            public InputAction @Reload => m_Wrapper.m_Weapons_Reload;
            public InputActionMap Get() { return m_Wrapper.m_Weapons; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WeaponsActions set) { return set.Get(); }
            public void SetCallbacks(IWeaponsActions instance)
            {
                if (m_Wrapper.m_WeaponsActionsCallbackInterface != null)
                {
                    @MainFire.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnMainFire;
                    @MainFire.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnMainFire;
                    @MainFire.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnMainFire;
                    @AlterFire.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnAlterFire;
                    @AlterFire.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnAlterFire;
                    @AlterFire.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnAlterFire;
                    @ThrowAwayWeapon.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnThrowAwayWeapon;
                    @ThrowAwayWeapon.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnThrowAwayWeapon;
                    @ThrowAwayWeapon.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnThrowAwayWeapon;
                    @ScrollInventory.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnScrollInventory;
                    @ScrollInventory.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnScrollInventory;
                    @ScrollInventory.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnScrollInventory;
                    @Reload.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnReload;
                    @Reload.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnReload;
                    @Reload.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnReload;
                }
                m_Wrapper.m_WeaponsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MainFire.started += instance.OnMainFire;
                    @MainFire.performed += instance.OnMainFire;
                    @MainFire.canceled += instance.OnMainFire;
                    @AlterFire.started += instance.OnAlterFire;
                    @AlterFire.performed += instance.OnAlterFire;
                    @AlterFire.canceled += instance.OnAlterFire;
                    @ThrowAwayWeapon.started += instance.OnThrowAwayWeapon;
                    @ThrowAwayWeapon.performed += instance.OnThrowAwayWeapon;
                    @ThrowAwayWeapon.canceled += instance.OnThrowAwayWeapon;
                    @ScrollInventory.started += instance.OnScrollInventory;
                    @ScrollInventory.performed += instance.OnScrollInventory;
                    @ScrollInventory.canceled += instance.OnScrollInventory;
                    @Reload.started += instance.OnReload;
                    @Reload.performed += instance.OnReload;
                    @Reload.canceled += instance.OnReload;
                }
            }
        }
        public WeaponsActions @Weapons => new WeaponsActions(this);
        private int m_MouseandKeyboardSchemeIndex = -1;
        public InputControlScheme MouseandKeyboardScheme
        {
            get
            {
                if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
                return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
            }
        }
        public interface ICharacterActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
        public interface IWeaponsActions
        {
            void OnMainFire(InputAction.CallbackContext context);
            void OnAlterFire(InputAction.CallbackContext context);
            void OnThrowAwayWeapon(InputAction.CallbackContext context);
            void OnScrollInventory(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
        }
    }
}
